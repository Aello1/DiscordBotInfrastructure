{"version":3,"file":"recursiveImport.js","sourceRoot":"","sources":["../../src/utils/recursiveImport.ts"],"names":[],"mappings":";;;;AAAA,oDAAoB;AACpB,wDAAwB;AAEjB,KAAK,UAAU,eAAe,CAAC,UAAkB;IACtD,IAAI,KAAK,GAAG,MAAM,YAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,aAAa,EAAE,IAAI,EAAE,CAAC,CAAC;IAE3E,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;QACxB,IAAI,QAAQ,GAAG,cAAI,CAAC,OAAO,CAAC,UAAU,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;QACnD,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE;YACtB,MAAM,eAAe,CAAC,QAAQ,CAAC,CAAA;SAChC;aAAM,IAAI,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;YACnC,gEAAa,QAAQ,GAAC,CAAA;SACvB;KACF;AACH,CAAC;AAXD,0CAWC","sourcesContent":["import fs from \"fs\";\r\nimport path from \"path\";\r\n\r\nexport async function recursiveImport(folderPath: string): Promise<any> {\r\n  let files = await fs.promises.readdir(folderPath, { withFileTypes: true });\r\n\r\n  for (const file of files) {\r\n    let filePath = path.resolve(folderPath, file.name);\r\n    if (file.isDirectory()) {\r\n      await recursiveImport(filePath)\r\n    } else if (filePath.endsWith(\".js\")) {\r\n      await import(filePath)\r\n    }\r\n  }\r\n}"]}